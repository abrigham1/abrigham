# setting to generic cause we're using docker so we don't
# need them to install anything for us
language: generic
# need docker added since everything is based off it
services:
  - docker
# add hosts entries for abrigham and mlapi.abrigham (need these for laravel dusk tests)
addons:
  hosts:
    - abrigham.test
    - mlapi.abrigham.test
# don't install submodules we're doing it manually since it wasn't working correctly
git:
  submodules: false
# install our laradock submodule
before_install:
  - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - git submodule update --init --recursive
# install all our dependencies
install:
  - bash first_install.sh
  - chmod -R 777 storage
  - cd laradock
  - docker-compose up --build -d workspace nginx selenium php-fpm anaconda
  - docker-compose ps
  - docker-compose exec workspace bash -c "composer install --no-suggest --no-interaction --prefer-dist"
  - docker-compose exec workspace bash -c "php artisan key:generate --ansi"
  - docker-compose exec workspace bash -c "npm install --unsafe-perm"
  - docker-compose exec workspace bash -c "npm run dev"
# run phpunit, laravel dusk, mocha, and phpcs
script:
  - docker-compose exec workspace bash -c "vendor/bin/phpunit --coverage-clover build/logs/clover.xml"
  # dusk must run before npm run test because it re-compiles webpack
  # (or we could run npm run dev again between npm run test and php artisan dusk)
  - docker-compose exec workspace bash -c "php artisan dusk"
  - docker-compose exec workspace bash -c "npm run test"
  - docker-compose exec workspace bash -c "vendor/bin/phpcs --standard=PSR12 ./app/Http"
# upload coverage report to coveralls.io
after_success:
  - docker-compose run -e TRAVIS -e TRAVIS_JOB_ID workspace bash -c "vendor/bin/php-coveralls -v"
# upload our tested docker images to amazon ECR and prepare app for production deployment
before_deploy:
  - sudo apt-get install python3-pip
  # install aws cli
  - pip3 install awscli --upgrade --user
  - aws --version
  - pip3 install awsebcli --upgrade --user
  - eb --version
  # tag our docker images
  - docker tag laradock_nginx:latest 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/nginx:latest
  - docker tag laradock_php-fpm:latest 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/php-fpm:latest
  - docker tag laradock_anaconda:latest 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/anaconda:latest
  # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY env vars must be set!
  - eval $(aws ecr get-login --no-include-email --region us-east-1)
  # push docker images out
  - docker push 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/nginx:latest
  - docker push 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/php-fpm:latest
  - docker push 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/anaconda:latest
  # prepare app for production deploy
  - docker-compose exec workspace bash -c "composer install --no-dev --optimize-autoloader --no-interaction --no-suggest --prefer-dist"
  - docker-compose exec workspace bash -c "npm install --unsafe-perm"
  - docker-compose exec workspace bash -c "npm run prod"
  - docker-compose exec workspace bash -c "php artisan clear-compiled"
  - docker-compose exec workspace bash -c "php artisan route:clear"
  - docker-compose exec workspace bash -c "php artisan cache:clear"
  - docker-compose exec workspace bash -c "php artisan view:clear"
  - docker-compose exec workspace bash -c "php artisan route:cache"
  - cd ../
# deploy via elastic beanstalk
deploy:
  provider: script
  skip_cleanup: true
  script: bash DeployScripts/deployProd.sh
  on:
    branch: master
    repo: abrigham1/abrigham

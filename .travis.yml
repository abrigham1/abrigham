# setting to generic cause we're using docker so we don't
# need them to install anything for us
language: generic
os: linux
python: 3
# need docker added since everything is based off it
services:
  - docker
cache:
  directories:
    - $HOME/.npm
    - $HOME/.composer/cache
# add hosts entries for abrigham and mlapi.abrigham (need these for laravel dusk tests)
addons:
  apt:
    update: true
    packages:
      - jq
      - bash
      - docker-ce
  hosts:
    - abrigham.test
    - mlapi.abrigham.test
# don't install submodules we're doing it manually since it wasn't working correctly
git:
  submodules: false
# install our laradock submodule
before_install:
  - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - git submodule update --init --recursive
# install all our dependencies
install:
  - cp .env.travis .env
  - cp laradock/.env.example laradock/.env
  - chmod -R 777 storage
  - docker-compose -f laradock/docker-compose.yml --project-directory laradock pull
  - docker-compose -f laradock/docker-compose.yml --project-directory laradock up --build -d workspace nginx selenium php-fpm anaconda
  - make docker-ps
  - make ci/dist
# run phpunit, laravel dusk, mocha, and phpcs
script:
  - docker-compose -f laradock/docker-compose.yml --project-directory laradock exec workspace bash -c "vendor/bin/phpunit --coverage-clover build/logs/clover.xml"
  - bin/dev/npm run test"
  - bin/dev/php artisan dusk"
  - docker-compose -f laradock/docker-compose.yml --project-directory laradock exec workspace bash -c "vendor/bin/phpcs --standard=PSR12 ./app/Http"
# upload coverage report to coveralls.io
after_success:
  - docker-compose -f laradock/docker-compose.yml --project-directory laradock run -e TRAVIS -e TRAVIS_JOB_ID workspace bash -c "vendor/bin/php-coveralls -v"
# upload our tested docker images to amazon ECR and prepare app for production deployment
before_deploy:
  - pyenv versions
  - pyenv install -s 3.7.1
  - pyenv local 3.7.1
  - pip -V
  - pip install --upgrade python-dev-tools pip setuptools wheel
  - pip -V
  # install aws cli
  - pip install awscli --upgrade --user
  - aws --version
  - pip install awsebcli --upgrade --user
  - eb --version
  # tag our docker images
  - docker tag laradock_nginx:latest 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/nginx:latest
  - docker tag laradock_php-fpm:latest 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/php-fpm:latest
  - docker tag laradock_anaconda:latest 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/anaconda:latest
  # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY env vars must be set!
  - eval $(aws ecr get-login --no-include-email --region us-east-1)
  # push docker images out
  - docker push 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/nginx:latest
  - docker push 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/php-fpm:latest
  - docker push 620139381534.dkr.ecr.us-east-1.amazonaws.com/abrigham/anaconda:latest
  # prepare app for production deploy
  - make prod/dist
# deploy via elastic beanstalk
deploy:
  provider: script
  skip_cleanup: true
  script: bash DeployScripts/deployProd.sh
  on:
    branch: master
    repo: abrigham1/abrigham
